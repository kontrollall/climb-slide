-- Carrega biblioteca externa (com pcall)
local success, Library = pcall(function()
	return loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
end)

if not success or not Library then
	warn("Falha ao carregar a biblioteca externa.")
	return
end

local Window = Library:NewWindow("Script")
local Tab = Window:NewSection("Credits: TGMANKASKE")

-- Botão para dar pet OP
Tab:CreateButton("Give OP Pet", function()
	print("Tentando dar pet OP...")

	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local rPets = ReplicatedStorage:FindFirstChild("R_Pets")

	if not rPets then
		warn("R_Pets não encontrado em ReplicatedStorage!")
		return
	end

	local args = {
		"Give_Pet",
		"Pet_Dark_Boshiro"
	}

	local success, err = pcall(function()
		rPets:FireServer(unpack(args))
	end)

	if success then
		print("Pet OP dado com sucesso!")
	else
		warn("Erro ao dar pet OP: "..tostring(err))
	end
end)

-- Função para mover o personagem suavemente até uma posição (substitui o 'Twenty')
local function MovePlayerSmoothlyToPosition(player, targetPosition)
	local RunService = game:GetService("RunService")
	if not player then return end

	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then
		warn("HumanoidRootPart não encontrado no personagem!")
		return
	end

	local speed = 0
	local maxSpeed = 50
	local acceleration = 15
	local decelerationDistance = 10
	local reached = false

	local connection
	connection = RunService.Heartbeat:Connect(function(dt)
		if reached then
			if connection then
				connection:Disconnect()
				connection = nil
			end
			return
		end

		local currentPos = hrp.Position
		local directionVector = targetPosition - currentPos
		local distance = directionVector.Magnitude

		if distance < 1 then
			reached = true
			return
		end

		local direction = directionVector.Unit

		-- Acelera enquanto longe, desacelera perto
		if distance > decelerationDistance then
			speed = math.min(speed + acceleration * dt, maxSpeed)
		else
			speed = math.clamp(speed, 10, maxSpeed) * (distance / decelerationDistance)
		end

		-- Move HumanoidRootPart suavemente
		local moveDelta = direction * speed * dt
		hrp.CFrame = hrp.CFrame + moveDelta
	end)
end

-- Botão para ativar o teleporte suave substituindo o "Twenty"
Tab:CreateButton("Teleport Smooth (Twenty Style)", function()
	local player = game.Players.LocalPlayer
	if not player then
		warn("LocalPlayer não encontrado!")
		return
	end

	local targetPosition = Vector3.new(4, 7021, 15045) -- posição alvo

	MovePlayerSmoothlyToPosition(player, targetPosition)
end)

-- Toggle para Auto Slide (moeda)
Tab:CreateToggle("Auto Slide (coin)", function(enabled)
	_G.GetWins = enabled
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local rServer = ReplicatedStorage:FindFirstChild("R_Server")
	local Maps = workspace:FindFirstChild("Maps")
	local Map1 = Maps and Maps:FindFirstChild("Map_1")

	if not rServer or not Map1 then
		warn("R_Server ou Map_1 não encontrados.")
		return
	end

	if enabled then
		task.spawn(function()
			while _G.GetWins do
				wait(1)
				local args = {
					"Slide",
					Map1
				}

				local success, err = pcall(function()
					rServer:FireServer(unpack(args))
				end)

				if not success then
					warn("Erro ao ativar Slide: "..tostring(err))
				end
			end
		end)
	end
end)
