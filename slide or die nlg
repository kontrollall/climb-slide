-- Carrega biblioteca externa (com pcall)
local success, Library = pcall(function()
	return loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
end)

if not success or not Library then
	warn("Falha ao carregar a biblioteca externa.")
	return
end

local Window = Library:NewWindow("Script")
local Tab = Window:NewSection("Credits: TGMANKASKE")

-- Botão para dar pet OP
Tab:CreateButton("Give OP Pet", function()
	print("Tentando dar pet OP...")

	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local rPets = ReplicatedStorage:FindFirstChild("R_Pets")

	if not rPets then
		warn("R_Pets não encontrado em ReplicatedStorage!")
		return
	end

	local args = {
		"Give_Pet",
		"Pet_Dark_Boshiro"
	}

	local success, err = pcall(function()
		rPets:FireServer(unpack(args))
	end)

	if success then
		print("Pet OP dado com sucesso!")
	else
		warn("Erro ao dar pet OP: "..tostring(err))
	end
end)



Tab:CreateButton("Teleport", function()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")

    local player = Players.LocalPlayer
    if not player then
        warn("Jogador local não encontrado!")
        return
    end

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    local targetPosition = Vector3.new(4, 7021, 15045) -- Posição alvo inicial do teleporte suave
    local speed = 9999 -- studs por segundo, ajuste a vontade

    -- Função para mover suavemente até o destino
    local function moveToPosition(targetPos, speed, onComplete)
        local connection
        connection = RunService.Heartbeat:Connect(function(deltaTime)
            if not humanoidRootPart or not humanoidRootPart.Parent then
                connection:Disconnect()
                return
            end

            local currentPos = humanoidRootPart.Position
            local direction = (targetPos - currentPos)
            local distance = direction.Magnitude

            if distance < 1 then
                humanoidRootPart.CFrame = CFrame.new(targetPos)
                connection:Disconnect()
                print("Chegou ao destino!")

                if onComplete then
                    onComplete()
                end
                return
            end

            local moveDistance = math.min(speed * deltaTime, distance)
            local moveVector = direction.Unit * moveDistance
            humanoidRootPart.CFrame = humanoidRootPart.CFrame + moveVector
        end)
    end

    -- Função para teleportar instantaneamente para o Trophy
    local function teleportToTrophy()
        local trophy = workspace:FindFirstChild("Maps")
            and workspace.Maps:FindFirstChild("Map_1")
            and workspace.Maps.Map_1:FindFirstChild("MainPart")
            and workspace.Maps.Map_1.MainPart:FindFirstChild("Ending_Model")
            and workspace.Maps.Map_1.MainPart.Ending_Model:FindFirstChild("Trophy_Model")
            and workspace.Maps.Map_1.MainPart.Ending_Model.Trophy_Model:FindFirstChild("Trophy")

        if trophy then
            humanoidRootPart.CFrame = trophy.CFrame + Vector3.new(0, 3, 0) -- Eleva 3 studs pra não prender no chão
            print("Teletransportado para o Trophy!")
        else
            warn("Trophy não encontrado para teleporte!")
        end
    end

    moveToPosition(targetPosition, speed, teleportToTrophy)
end)



-- Toggle para Auto Slide (moeda)
Tab:CreateToggle("Auto Slide (coin)", function(enabled)
	_G.GetWins = enabled
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local rServer = ReplicatedStorage:FindFirstChild("R_Server")
	local Maps = workspace:FindFirstChild("Maps")
	local Map1 = Maps and Maps:FindFirstChild("Map_1")

	if not rServer or not Map1 then
		warn("R_Server ou Map_1 não encontrados.")
		return
	end

	if enabled then
		task.spawn(function()
			while _G.GetWins do
				wait(1)
				local args = {
					"Slide",
					Map1
				}

				local success, err = pcall(function()
					rServer:FireServer(unpack(args))
				end)

				if not success then
					warn("Erro ao ativar Slide: "..tostring(err))
				end
			end
		end)
	end
end)
